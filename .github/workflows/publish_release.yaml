# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: Publish release

on:
  push:
    tags: [ "v*.*.*" ]

jobs:
  get_semver:
    name: Get Semantic Version
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.get.outputs.semver }}
    steps:
    - id: get
      env:
        RELEASE_VERSION: ${{ github.ref_name }}
      run: |
        if [[ "${RELEASE_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "semver=${RELEASE_VERSION/v/}" >> "$GITHUB_OUTPUT"
        else
          # If ref name does not match semver, default to 0.0.0.
          # This happens when running from a branch such as main.
          echo "semver=0.0.0" >> "$GITHUB_OUTPUT"
        fi

  # Note: When modifying this job, copy modifications to all other workflows' image jobs.
  all_component_images:
    needs: get_semver
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - name: coturn
          context: addons/coturn

        - name: coturn-web
          context: addons/coturn-web

        - name: gst-web
          context: addons/gst-web

        - name: gstreamer
          version_suffix: -ubuntu20.04
          build_args: |
            DISTRIB_RELEASE=20.04
          context: addons/gstreamer

        - name: gstreamer
          version_suffix: -ubuntu22.04
          build_args: |
            DISTRIB_RELEASE=22.04
          context: addons/gstreamer
        
        - name: js-interposer
          version_suffix: -ubuntu20.04
          build_args: |
            DISTRIB_RELEASE=20.04
            PKG_NAME=selkies-js-interposer
            PKG_VERSION=${{ needs.get_semver.outputs.semver }}
          context: addons/js-interposer
          dockerfile: Dockerfile.ubuntu_debpkg

        - name: js-interposer
          version_suffix: -ubuntu22.04
          build_args: |
            DISTRIB_RELEASE=22.04
            PKG_NAME=selkies-js-interposer
            PKG_VERSION=${{ needs.get_semver.outputs.semver }}
          context: addons/js-interposer
          dockerfile: Dockerfile.ubuntu_debpkg

        - name: infra-gcp-installer
          context: infra/gce/installer-image
          diff: infra/gce

        - name: py-build
          build_args: |
            PACKAGE_VERSION=${{ needs.get_semver.outputs.semver }}
          context: .

    name: ${{ matrix.name }}${{ matrix.version_suffix }} image build & publish
    steps:
    - uses: actions/checkout@v4

    - name: Build & publish ${{ matrix.name }} image
      uses: ./.github/actions/build_and_publish_image
      with:
        build_args: ${{ matrix.build_args }}
        dockerfile: ${{ matrix.dockerfile }}
        context: ${{ matrix.context }}
        subproject: ${{ matrix.name }}
        tags: |
          ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ github.ref_name }}${{ matrix.version_suffix }}
          ghcr.io/${{ github.repository }}/${{ matrix.name }}:latest${{ matrix.version_suffix }}

  # Note: When modifying this job, copy modifications to all other workflows' image jobs.
  all_example_images:
    needs:
    - get_semver
    - all_component_images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - name: gst-py-example
          version_suffix: -ubuntu20.04
          build_args: |
            PACKAGE_VERSION=${{ needs.get_semver.outputs.semver }}
            DISTRIB_RELEASE=20.04
            GSTREAMER_BASE_IMAGE_RELEASE=${{ github.ref_name }}
            PY_BUILD_IMAGE=ghcr.io/${{ github.repository }}/py-build:${{ github.ref_name }}
            WEB_IMAGE=ghcr.io/${{ github.repository }}/gst-web:${{ github.ref_name }}
            JS_BASE_IMAGE_RELEASE=${{ github.ref_name }}
            JS_BASE_IMAGE=ghcr.io/${{ github.repository }}/js-interposer
          dockerfile: Dockerfile.example
          context: .

        - name: gst-py-example
          version_suffix: -ubuntu22.04
          build_args: |
            PACKAGE_VERSION=${{ needs.get_semver.outputs.semver }}
            DISTRIB_RELEASE=22.04
            GSTREAMER_BASE_IMAGE_RELEASE=${{ github.ref_name }}
            PY_BUILD_IMAGE=ghcr.io/${{ github.repository }}/py-build:${{ github.ref_name }}
            WEB_IMAGE=ghcr.io/${{ github.repository }}/gst-web:${{ github.ref_name }}
            JS_BASE_IMAGE_RELEASE=${{ github.ref_name }}
            JS_BASE_IMAGE=ghcr.io/${{ github.repository }}/js-interposer
          dockerfile: Dockerfile.example
          context: .

    name: ${{ matrix.name }}${{ matrix.version_suffix }} image build & publish
    steps:
    - uses: actions/checkout@v4

    - name: Build & publish ${{ matrix.name }} image
      uses: ./.github/actions/build_and_publish_image
      with:
        build_args: ${{ matrix.build_args }}
        dockerfile: ${{ matrix.dockerfile }}
        context: ${{ matrix.context }}
        subproject: ${{ matrix.name }}
        tags: |
          ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ github.ref_name }}${{ matrix.version_suffix }}
          ghcr.io/${{ github.repository }}/${{ matrix.name }}:latest${{ matrix.version_suffix }}

  all_assets:
    needs:
    - get_semver
    - all_component_images
    - all_example_images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - id: gst20
          description: GStreamer Ubuntu 20.04
          image_tag: ghcr.io/${{ github.repository }}/gstreamer:${{ github.ref_name }}-ubuntu20.04
          mimetype: application/x-gtar
          source_path: /opt/selkies-gstreamer-latest.tar.xz
          target_directory: /tmp
          target_name: selkies-gstreamer-gpl-${{ github.ref_name }}-ubuntu20.04.tar.xz

        - id: gst22
          description: GStreamer Ubuntu 22.04
          image_tag: ghcr.io/${{ github.repository }}/gstreamer:${{ github.ref_name }}-ubuntu22.04
          mimetype: application/x-gtar
          source_path: /opt/selkies-gstreamer-latest.tar.xz
          target_directory: /tmp
          target_name: selkies-gstreamer-gpl-${{ github.ref_name }}-ubuntu22.04.tar.xz
        
        - id: js20
          description: Joystick Interposer Ubuntu 20.04
          image_tag: ghcr.io/${{ github.repository }}/js-interposer:${{ github.ref_name }}-ubuntu20.04
          mimetype: application/vnd.debian.binary-package
          source_path: /opt/selkies-js-interposer_${{ needs.get_semver.outputs.semver }}.deb
          target_directory: /tmp
          target_name: selkies-js-interposer-${{ github.ref_name }}-ubuntu20.04.deb
        
        - id: js22
          description: Joystick Interposer Ubuntu 22.04
          image_tag: ghcr.io/${{ github.repository }}/js-interposer:${{ github.ref_name }}-ubuntu22.04
          mimetype: application/vnd.debian.binary-package
          source_path: /opt/selkies-js-interposer_${{ needs.get_semver.outputs.semver }}.deb
          target_directory: /tmp
          target_name: selkies-js-interposer-${{ github.ref_name }}-ubuntu22.04.deb

        - id: py
          description: Python Wheel
          image_tag: ghcr.io/${{ github.repository }}/py-build:${{ github.ref_name }}
          mimetype: application/x-pywheel+zip
          source_path: /opt/pypi/dist/selkies_gstreamer-${{ needs.get_semver.outputs.semver }}-py3-none-any.whl
          target_directory: /tmp
          target_name: selkies_gstreamer-${{ needs.get_semver.outputs.semver }}-py3-none-any.whl

        - id: web
          description: Web Interface
          image_tag: ghcr.io/${{ github.repository }}/gst-web:${{ github.ref_name }}
          mimetype: application/x-gtar
          source_path: /opt/gst-web.tar.xz
          target_directory: /tmp
          target_name: selkies-gstreamer-web-${{ github.ref_name }}.tar.xz

    name: ${{ matrix.description }} release artifact extraction & upload
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: ${{ matrix.description }} release artifact extraction
      id: extract
      run: |
        docker create --name copy "${{ matrix.image_tag }}"
        TARGET_PATH="${{ matrix.target_directory }}/${{ matrix.target_name }}"
        docker cp "copy:${{ matrix.source_path }}" "$TARGET_PATH"
        if [ -d "$TARGET_PATH" ]; then
          SOURCE_DIRNAME=$(echo "${{ matrix.source_path }}" | sed 's:.*/::')
          cd "${{ matrix.target_directory }}" && mv -f "$TARGET_PATH" "$SOURCE_DIRNAME"
          tar -cJvf "temp.tar.xz" "$SOURCE_DIRNAME" && rm -rf "$SOURCE_DIRNAME" && mv -f "temp.tar.xz" "$TARGET_PATH"
        fi
        docker rm copy

    - name: ${{ matrix.description }} release artifact upload
      id: release
      uses: softprops/action-gh-release@v2
      with:
        name: "Release ${{ github.ref }}"
        tag_name: ${{ github.ref }}
        body: "By downloading the GStreamer build files, you acknowledge and agree to the terms of libraries and executables licensed GPLv2/GPLv3 or https://developer.download.nvidia.com/compute/cuda/redist/cuda_nvrtc/LICENSE.txt."
        files: ${{ matrix.target_directory }}/${{ matrix.target_name }}
        draft: true
        generate_release_notes: true
